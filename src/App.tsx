import { useState } from "react";
import Tweet from "./Tweet";
import EditIcon from "@mui/icons-material/Edit";
import AssistantIcon from "@mui/icons-material/Assistant";
import { data, SampleTweet } from "./data";

import "./App.css";
import {
  Card,
  Container,
  Typography,
  Grid,
  Button,
  AppBar,
  Toolbar,
  Paper,
  Chip,
  Link,
} from "@mui/material";

const WAITLIST_LINK = "https://ltzilf9i59k.typeform.com/to/lgdI1XV8";

function AppBarComponent() {
  return (
    <AppBar>
      <Toolbar
        sx={{
          justifyContent: "center",
          fontSize: "28px",
          fontWeight: "bold",
          letterSpacing: "2px",
          fontStyle: "italic",
        }}
      >
        isthistweetaigenerated?
      </Toolbar>{" "}
      <Paper>
        <Typography variant="caption" color="black">
          Can you beat GPT in this game? You'll be given some tweets, real &
          fake(generated by GPT). Try to tell them apart!
        </Typography>
      </Paper>
    </AppBar>
  );
}

function Question({ tweet }: any) {
  return (
    <div>
      <Typography variant="h6" padding={"10px"}>
        Did {tweet.name} tweet this or was it generated by GPT?
      </Typography>
    </div>
  );
}

function TweetCard({ tweet }: any) {
  return (
    <Card>
      <Tweet tweet={tweet} />
    </Card>
  );
}

function AnswerOptions({
  tweet,
  setCurrentStreak,
  currentStreak,
  setTweet,
  setLoseGame,
  setloseGameByChoosingAIForHumanAnswer,
}: any) {
  const answerHandler = (givenAnswer: boolean) => {
    const correctAnswer = tweet.isReal === givenAnswer;

    if (correctAnswer) {
      setCurrentStreak(currentStreak + 1);
      setTweet(getRandomTweet(data, tweet));
    } else {
      if (givenAnswer === true) {
        setLoseGame(true);
      } else {
        setloseGameByChoosingAIForHumanAnswer(true);
      }
    }
  };

  return (
    <div style={{ padding: 20 }}>
      <Grid container spacing={10} justifyContent={"center"}>
        <Grid item>
          <Button
            variant="contained"
            color="primary"
            size="large"
            startIcon={<EditIcon />}
            style={{
              fontWeight: "bold",
              textTransform: "none",
              color: "white",
            }}
            onClick={() => answerHandler(true)}
          >
            {tweet.name}
          </Button>
        </Grid>
        <Grid item>
          <Button
            variant="contained"
            color="primary"
            size="large"
            endIcon={<AssistantIcon />}
            style={{
              fontWeight: "bold",
              textTransform: "none",
              color: "white",
            }}
            onClick={() => answerHandler(false)}
          >
            <Typography>GPT</Typography>
          </Button>
        </Grid>
      </Grid>
    </div>
  );
}

function CurrentStreak({ currentStreak }: any) {
  const label = "Correct guess streak: " + currentStreak;

  return (
    <div>
      <Chip label={label} color="primary"></Chip>
    </div>
  );
}

function Frame({
  setLoseGame,
  currentStreak,
  setCurrentStreak,
  tweet,
  setTweet,
  setloseGameByChoosingAIForHumanAnswer,
}: any) {
  return (
    <>
      <Question tweet={tweet}></Question>
      <TweetCard tweet={tweet}></TweetCard>
      <AnswerOptions
        tweet={tweet}
        setCurrentStreak={setCurrentStreak}
        currentStreak={currentStreak}
        setTweet={setTweet}
        setLoseGame={setLoseGame}
        setloseGameByChoosingAIForHumanAnswer={
          setloseGameByChoosingAIForHumanAnswer
        }
      ></AnswerOptions>
      <div style={{ padding: "10px" }}>
        <CurrentStreak currentStreak={currentStreak}></CurrentStreak>
      </div>
    </>
  );
}

function Footer() {
  return (
    <footer
      style={{
        padding: "1rem",
        textAlign: "center",
      }}
    >
      <Typography variant="body1">
        Made with ‚ù§ by{" "}
        <Link
          href="https://twitter.com/samesh_l"
          target="_blank"
          rel="noopener noreferrer"
        >
          Samesh
        </Link>{" "}
        &{" "}
        <Link
          href="https://twitter.com/AmitHegde4"
          target="_blank"
          rel="noopener noreferrer"
        >
          Amit
        </Link>
      </Typography>
      <Typography variant="body2">
        If interested in the beta,{" "}
        <Link href={WAITLIST_LINK} target="_blank" rel="noopener noreferrer">
          signup for the waitlist here
        </Link>
      </Typography>
    </footer>
  );
}

const getRandomTweet = (
  data: SampleTweet[],
  oldTweet: SampleTweet
): SampleTweet => {
  let newTweet = data[Math.floor(Math.random() * data.length)];

  while (newTweet.tweet === oldTweet.tweet) {
    newTweet = data[Math.floor(Math.random() * data.length)];
  }

  return newTweet;
};

function LoseGameOtherWay({ tweet }: any) {
  return (
    <Typography variant="h6">
      Hey! That tweet was actually posted by {tweet.name}. Funny you think
      ChatGPT came up with it xD
      <br></br>
      <Link href="./" rel="noopener noreferrer">
        Wanna play again tho?
      </Link>
      <br></br>
      If interested in the beta, consider &nbsp;
      <Link href="{WAITLIST_LINK} " target="_blank" rel="noopener noreferrer">
        signing for the waitlist here
      </Link>
    </Typography>
  );
}

function App() {
  const [isGameStarted, setIsGameStarted] = useState(false);
  const [currentStreak, setCurrentStreak] = useState(0);
  const [loseGame, setLoseGame] = useState(false);
  const [tweet, setTweet] = useState<SampleTweet>(
    getRandomTweet(data, data[0])
  );
  const [
    loseGameByChoosingAIForHumanAnswer,
    setloseGameByChoosingAIForHumanAnswer,
  ] = useState(false);

  return (
    <>
      <AppBarComponent></AppBarComponent>
      <main>
        {isGameStarted && !loseGame && !loseGameByChoosingAIForHumanAnswer ? (
          <Container>
            <Frame
              setLoseGame={setLoseGame}
              currentStreak={currentStreak}
              setCurrentStreak={setCurrentStreak}
              tweet={tweet}
              setTweet={setTweet}
              setloseGameByChoosingAIForHumanAnswer={
                setloseGameByChoosingAIForHumanAnswer
              }
            ></Frame>
          </Container>
        ) : (
          !loseGame &&
          !loseGameByChoosingAIForHumanAnswer && (
            <Button variant="contained" onClick={() => setIsGameStarted(true)}>
              Start Game
            </Button>
          )
        )}
      </main>
      {loseGame ? (
        <Typography variant="h6">
          Ahh! That tweet was actually developed by GPT hehe. Wanna give our
          tool a try so it helps you craft better tweets in your style? &nbsp;
          <Link
            href="{WAITLIST_LINK} "
            target="_blank"
            rel="noopener noreferrer"
          >
            Sign for the waitlist here
          </Link>
          <br></br>
          <Link href="./" rel="noopener noreferrer">
            Wanna play again tho?
          </Link>
        </Typography>
      ) : (
        <></>
      )}
      {loseGameByChoosingAIForHumanAnswer ? (
        <LoseGameOtherWay tweet={tweet}></LoseGameOtherWay>
      ) : (
        <></>
      )}
      <Footer></Footer>
    </>
  );
}

export default App;
